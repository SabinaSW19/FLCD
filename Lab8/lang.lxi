%{
#include <stdio.h>
#include <string.h>
#include "y.tab.h"
int lines = 0;
%}
%option nounput yylineno
%option noyywrap

digit         [0-9]
letter		[a-zA-Z]
string        ["]([a-zA-Z0-9]*)["]
integer        0|[+-]?[1-9][0-9]*
character        [a-zA-Z0-9]
constant        {string}|{integer}
identifier         [a-zA-Z]([a-zA-Z0-9]{0,7})

%%

"int"    {printf("Reserved word %s\n",yytext); return INT;}
"char"     {printf("Reserved word %s\n",yytext); return CHAR;}
"if"     {printf("Reserved word %s\n",yytext); return IF;}
"else"     {printf("Reserved word %s\n",yytext); return ELSE;}
"while"     {printf("Reserved word %s\n",yytext); return WHILE;}
"input"     {printf("Reserved word %s\n",yytext); return INPUT;}
"print"     {printf("Reserved word %s\n",yytext); return PRINT;}
"begin"     {printf("Reserved word %s\n",yytext); return BEGIN;}
"end"     {printf("Reserved word %s\n",yytext); return END;}

{identifier}     {printf("Identifier %s\n",yytext); return IDENTIFIER;}

{constant}     {printf("Constant %s\n",yytext); return CONSTANT;}

"("     {printf("Separator %s\n",yytext); return LEFT_ROUND;}
")"     {printf("Separator %s\n",yytext); return RIGHT_ROUND;}
"["     {printf("Separator %s\n",yytext); return LEFT_SQUARE;}
"]"     {printf("Separator %s\n",yytext); return RIGHT_SQUARE;}
","     {printf("Separator %s\n",yytext); return COMMA;}
";"     {printf("Separator %s\n",yytext); return SEMI_COLON;}
"+"     {printf("Operator %s\n",yytext); return PLUS;}
"-"     {printf("Operator %s\n",yytext); return MINUS;}
"*"     {printf("Operator %s\n",yytext); return MULTIPLY;}
"/"     {printf("Operator %s\n",yytext); return DIVIDE;}
"%"     {printf("Operator %s\n",yytext); return MODULO;}
"<"     {printf("Operator %s\n",yytext); return LESS;}
"<="     {printf("Operator %s\n",yytext); return LESS_OR_EQUAL;}
"="     {printf("Operator %s\n",yytext); return SIMPLE_EQUAL;}
">="     {printf("Operator %s\n",yytext); return GREATER_OR_EQUAL;}
">"     {printf("Operator %s\n",yytext); return GREATER;}
"!="     {printf("Operator %s\n",yytext); return DIFFERENT;}
"=="     {printf("Operator %s\n",yytext); return DOUBLE_EQUAL;}

[ \t]+  {}

[\n]+   {lines++;}
         
[a-zA-Z][a-zA-Z0-9]{8,}    {printf("Illegal size of the identifier \n");}
[0-9][a-zA-Z0-9]{0,7}    {printf("Illegal identifier %s\n",yytext);}
.    {printf("Illegal symbol%s%d\n",yytext,lines);}
%% 